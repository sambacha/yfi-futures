From d6c8058917894bbe755e6536aa6bcd78e0beafec Mon Sep 17 00:00:00 2001
From: josojo <josojo@hotmail.de>
Date: Sun, 2 Aug 2020 17:16:08 +0200
Subject: [PATCH] first draft with working data populations, if abis are
 manipulatetd correctly

---
 scripts/ganache/create-batchexchange-api.js |  19 +++
 scripts/ganache/setup_thegraph_data.js      | 125 ++++++++++++++++++++
 test/test_utils.js                          |  16 +--
 3 files changed, 153 insertions(+), 7 deletions(-)
 create mode 100644 scripts/ganache/create-batchexchange-api.js
 create mode 100644 scripts/ganache/setup_thegraph_data.js

diff --git a/scripts/ganache/create-batchexchange-api.js b/scripts/ganache/create-batchexchange-api.js
new file mode 100644
index 00000000..01f3a6fa
--- /dev/null
+++ b/scripts/ganache/create-batchexchange-api.js
@@ -0,0 +1,19 @@
+module.exports = async (callback, accounts) => {
+  try {
+    const fs = require("fs")
+    console.log("current ganache network id: ", await web3.eth.net.getId())
+    // destination.txt will be created or overwritten by default.
+    fs.copyFile(
+      "node_modules/@gnosis.pm/dex-contracts/build/contracts/BatchExchange.json",
+      "build/contracts/BatchExchange.json",
+      (err) => {
+        if (err) throw err
+        console.log("Created BatchExchange.json")
+      }
+    )
+    callback()
+  } catch (error) {
+    console.log(error.response)
+    callback(error)
+  }
+}
diff --git a/scripts/ganache/setup_thegraph_data.js b/scripts/ganache/setup_thegraph_data.js
new file mode 100644
index 00000000..ae511473
--- /dev/null
+++ b/scripts/ganache/setup_thegraph_data.js
@@ -0,0 +1,125 @@
+const Contract = require("@truffle/contract")
+const fs = require("fs")
+
+const {
+  deployFleetOfSafes,
+  fetchTokenInfoFromExchange,
+  buildTransferApproveDepositFromOrders,
+  buildOrders,
+  getSafe,
+  getExchange,
+} = require("../utils/trading_strategy_helpers")(web3, artifacts)
+const { toErc20Units } = require("../utils/printing_tools")
+const { execTransaction } = require("../utils/internals")(web3, artifacts)
+
+const BatchExchange = artifacts.require("BatchExchange")
+const ERC20 = artifacts.require("ERC20Detailed")
+const MintableToken = artifacts.require("DetailedMintableToken")
+const { addCustomMintableTokenToExchange, deploySafe } = require("../../test/test_utils")
+
+const testAutomaticDeposits = async function (tradeInfo, safeOwner, artifacts = artifacts) {
+  const {
+    numBrackets,
+    lowestLimit,
+    highestLimit,
+    currentPrice,
+    amountQuoteToken,
+    amountbaseToken,
+    quoteTokenInfo,
+    baseTokenInfo,
+  } = tradeInfo
+  const { decimals: quoteTokenDecimals, symbol: quoteTokenSymbol } = quoteTokenInfo
+  const { decimals: baseTokenDecimals, symbol: baseTokenSymbol } = baseTokenInfo
+  const GnosisSafe = artifacts.require("GnosisSafe")
+  const ProxyFactory = artifacts.require("GnosisSafeProxyFactory")
+  const gnosisSafeMasterCopy = await GnosisSafe.new()
+  const proxyFactory = await ProxyFactory.new()
+  const exchange = await BatchExchange.deployed()
+  const masterSafe = await GnosisSafe.at(await deploySafe(gnosisSafeMasterCopy, proxyFactory, [safeOwner], 1))
+  const bracketAddresses = await deployFleetOfSafes(masterSafe.address, numBrackets)
+  //Create  quoteToken and add it to the exchange
+  const { id: quoteTokenId, token: quoteToken } = await addCustomMintableTokenToExchange(
+    exchange,
+    quoteTokenSymbol,
+    quoteTokenDecimals,
+    safeOwner,
+    artifacts
+  )
+
+  console.log(exchange.address)
+  console.log(await exchange.feeToken())
+  const depositAmountQuoteToken = toErc20Units(amountQuoteToken, quoteTokenDecimals)
+  await quoteToken.mint(masterSafe.address, depositAmountQuoteToken, { from: safeOwner })
+
+  //Create  baseToken and add it to the exchange
+  const { id: baseTokenId, token: baseToken } = await addCustomMintableTokenToExchange(
+    exchange,
+    baseTokenSymbol,
+    baseTokenDecimals,
+    safeOwner,
+    artifacts
+  )
+  const depositAmountbaseToken = toErc20Units(amountbaseToken, baseTokenDecimals)
+  await baseToken.mint(masterSafe.address, depositAmountbaseToken, { from: safeOwner })
+
+  console.log(exchange.address)
+  console.log(await exchange.feeToken())
+  // copy networks also into nodemodule files:
+  fs.copyFile(
+    "build/contracts/BatchExchange.json",
+    "node_modules/@gnosis.pm/dex-contracts/build/contracts/BatchExchange.json",
+    (err) => {
+      if (err) throw err
+      console.log("Created BatchExchange.json")
+    }
+  )
+  // Build orders
+  const orderTransaction = await buildOrders(
+    masterSafe.address,
+    bracketAddresses,
+    baseTokenId,
+    quoteTokenId,
+    lowestLimit,
+    highestLimit,
+    exchange
+  )
+  await execTransaction(masterSafe, safeOwner, orderTransaction)
+
+  console.log(exchange.address)
+  console.log(await exchange.feeToken())
+  // Make transfers
+  const batchTransaction = await buildTransferApproveDepositFromOrders(
+    masterSafe.address,
+    bracketAddresses,
+    baseToken.address,
+    quoteToken.address,
+    lowestLimit,
+    highestLimit,
+    currentPrice,
+    depositAmountQuoteToken,
+    depositAmountbaseToken,
+    exchange
+  )
+  await execTransaction(masterSafe, safeOwner, batchTransaction)
+}
+
+module.exports = async (callback, accounts) => {
+  const tradeInfo = {
+    numBrackets: 2,
+    lowestLimit: 100,
+    highestLimit: 300,
+    currentPrice: 200,
+    amountQuoteToken: 10,
+    amountbaseToken: 10,
+    quoteTokenInfo: { symbol: "DAI", decimals: 18 },
+    baseTokenInfo: { symbol: "WETH", decimals: 18 },
+  }
+  try {
+    await testAutomaticDeposits(tradeInfo, await web3.eth.getAccounts().then((accounts) => accounts[0]), artifacts)
+
+    callback()
+  } catch (error) {
+    console.log(error.response)
+    callback(error)
+  }
+}
diff --git a/test/test_utils.js b/test/test_utils.js
index 1baedd76..e2eb2462 100644
--- a/test/test_utils.js
+++ b/test/test_utils.js
@@ -1,21 +1,22 @@
-const TokenOWL = artifacts.require("TokenOWL")
-const TestToken = artifacts.require("DetailedMintableToken")
-
 const { toErc20Units } = require("../scripts/utils/printing_tools")
 const { ZERO_ADDRESS } = require("../scripts/utils/constants")
 
-const prepareTokenRegistration = async function (account, exchange) {
-  const owlToken = await TokenOWL.at(await exchange.feeToken())
+const prepareTokenRegistration = async function (account, exchange, artifacts = artifacts) {
+  const TokenOWL = artifacts.require("TokenOWL")
+  const TestToken = artifacts.require("DetailedMintableToken")
+  const owlToken = await TokenOWL.at(await exchange.feeToken.call())
   await owlToken.setMinter(account)
   await owlToken.mintOWL(account, toErc20Units(10, 18))
   const currentAllowance = await owlToken.allowance(account, exchange.address)
   await owlToken.approve(exchange.address, currentAllowance.add(toErc20Units(10, 18)))
 }
 
-const addCustomMintableTokenToExchange = async function (exchange, symbol, decimals, account) {
+const addCustomMintableTokenToExchange = async function (exchange, symbol, decimals, account, artifacts = artifacts) {
+  const TokenOWL = artifacts.require("TokenOWL")
+  const TestToken = artifacts.require("DetailedMintableToken")
   // TODO: use this function in all tests creating new tokens
   const tokenPromise = TestToken.new(symbol, decimals)
-  await prepareTokenRegistration(account, exchange)
+  await prepareTokenRegistration(account, exchange, artifacts)
   const token = await tokenPromise
   await exchange.addToken(token.address, { from: account })
   const id = await exchange.tokenAddressToIdMap(token.address)
@@ -34,6 +35,7 @@ const deploySafe = async function (gnosisSafeMasterCopy, proxyFactory, owners, t
 }
 
 const getParamFromTxEvent = async function (transaction, eventName, paramName, contractAddress) {
+  const assert = require("assert")
   let logs = transaction.logs
   if (eventName != null) {
     logs = logs.filter((l) => l.event === eventName && l.address === contractAddress)
