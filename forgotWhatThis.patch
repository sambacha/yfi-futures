From 38cf1e107a8158b00bc78751a218af66e908a212 Mon Sep 17 00:00:00 2001
From: Federico Giacon <58218759+fedgiac@users.noreply.github.com>
Date: Thu, 3 Sep 2020 12:22:34 +0200
Subject: [PATCH] Work on auctions bot

---
 scripts/auctions/auctions.js                  | 194 ++++++++++++++++++
 scripts/auctions/run.js                       |  39 ++++
 .../dai-weth_and_gno-owl.json                 |  26 +++
 test/scripts/auctions/auctions.js             |  65 ++++++
 4 files changed, 324 insertions(+)
 create mode 100644 scripts/auctions/auctions.js
 create mode 100644 scripts/auctions/run.js
 create mode 100644 scripts/auctions/sample_strategies/dai-weth_and_gno-owl.json
 create mode 100644 test/scripts/auctions/auctions.js

diff --git a/scripts/auctions/auctions.js b/scripts/auctions/auctions.js
new file mode 100644
index 00000000..adec3d95
--- /dev/null
+++ b/scripts/auctions/auctions.js
@@ -0,0 +1,194 @@
+const fs = require("fs").promises
+const { decodeOrders } = require("@gnosis.pm/dex-contracts")
+
+const { uniqueItems } = require("../utils/js_helpers")
+
+const { getUnlimitedOrderAmounts } = require("@gnosis.pm/dex-contracts")
+const { floatToErc20Units, toErc20Units } = require("../utils/printing_tools")
+const { getOneinchPrice } = require("../utils/price_utils")
+const { fetchGasPrices } = require("../utils/gas")
+
+const MILLIS_IN_ONE_DAY = 24 * 3600 * 1000
+const MAX_ADMISSIBLE_GAS_PRICE_WEI = 10000 * 10 ** 9
+
+module.exports = function (web3, artifacts) {
+  const { fetchTokenInfoFromExchange } = require("../utils/trading_strategy_helpers")(web3, artifacts)
+  const { getExchange } = require("../utils/trading_strategy_helpers")(web3, artifacts)
+
+  const throwOnMalformedArguments = function (argv) {
+    const priceAllowancePercent = argv.priceAllowancePercent
+    if (!Number.isInteger(priceAllowancePercent)) {
+      throw new Error("Price allowance must be a number (with no percent symbol)")
+    }
+    if (priceAllowancePercent < 0 || priceAllowancePercent > 100) {
+      throw new Error("Price allowance must lie between 0 and 100")
+    }
+    const startTimestamp = argv.startTimestamp
+    const minimumReasonableStart = Date.parse("01 Jan 2020 00:00:00 GMT")
+    if (startTimestamp < minimumReasonableStart) {
+      throw new Error("Start timestamp describes a date before the year 2020. Is the start timestamp in milliseconds?")
+    }
+  }
+
+  const throwOnMalformedStrategy = function (strategy) {
+    if (!Array.isArray(strategy)) {
+      throw new Error("Strategy file does not contain an array")
+    }
+    strategy.forEach((order) => {
+      if (
+        !Number.isInteger(order.buyTokenId) ||
+        !Number.isInteger(order.sellTokenId) ||
+        typeof order.buyTokenSymbol !== "string" ||
+        typeof order.sellTokenSymbol !== "string"
+      ) {
+        console.error(`Bad order: ${JSON.stringify(order)}`)
+        throw new Error("Order from strategy file is not valid")
+      }
+    })
+  }
+
+  const throwIfTokenIdAndSymbolDontMatch = async function (strategy, tokenInfoPromises) {
+    for (const order of strategy) {
+      for (const [id, symbol] of [
+        [order.buyTokenId, order.buyTokenSymbol],
+        [order.sellTokenId, order.sellTokenSymbol],
+      ]) {
+        const idToSymbol = (await tokenInfoPromises[id]).symbol
+
+        if (idToSymbol !== symbol) {
+          throw new Error(`Token at given id (${id}, ${idToSymbol}) and token symbol (${symbol}) don't match.`)
+        }
+      }
+    }
+  }
+
+  const openOrFutureOrdersArePresent = async function (user, exchange) {
+    const orders = decodeOrders(await exchange.getEncodedUserOrders.call(user))
+    for (const order of orders) {
+      // note: JS tomestamps are in milliseconds, Solidity timestamps in seconds
+      if (order.validUntil >= Date.now() / 1000) {
+        return true
+      }
+    }
+    return false
+  }
+
+  const determineOrderToExecute = function (strategy, startTimestamp) {
+    const currentTimestamp = Date.now()
+    const millisAfterStart = currentTimestamp > startTimestamp ? currentTimestamp - startTimestamp : 0
+    // day zero is the day in which the auction starts
+    const dayOfOrder = Math.ceil(millisAfterStart / MILLIS_IN_ONE_DAY)
+    // Orders of a strategy are executed sequentially:
+    // on day zero the first order is executed, on day one the second, and so on.
+    // After all orders in a strategy have been created once, they are created again in the same order.
+    return strategy[dayOfOrder % strategy.length]
+  }
+
+  const gasPriceWei = async function (gasPriceString, gasPriceScale) {
+    const gasPrices = await fetchGasPrices()
+    const price = gasPrices[gasPriceString]
+    if (!price) {
+      console.error("Gas prices:", JSON.stringify(gasPrices))
+      console.error("Desired gas price:", gasPriceString)
+      throw new Error("Unable to retrieve gas price in wei")
+    }
+
+    if (price > MAX_ADMISSIBLE_GAS_PRICE_WEI) {
+      throw new Error(`Gas price of ${price / 10 ** 9} Gwei is too high, refusing to continue`)
+    }
+
+    // apply scaling constant to gas price
+    const scaledGasPrice = parseInt(price * gasPriceScale)
+
+    return scaledGasPrice
+  }
+
+  const runAuction = async function (argv) {
+    throwOnMalformedArguments(argv)
+
+    const account = (await web3.eth.getAccounts())[0]
+    console.log("Using account", account)
+    const exchange = await getExchange()
+
+    if (await openOrFutureOrdersArePresent(account, exchange)) {
+      throw new Error(
+        "No order is created because other auction orders have already been created. Maybe this script has already been executed today?"
+      )
+    }
+
+    const strategy = JSON.parse(await fs.readFile(argv.strategyFile, "utf8"))
+    throwOnMalformedStrategy(strategy)
+
+    const tokenIdSet = new Set()
+    strategy.forEach((order) => {
+      tokenIdSet.add(order.buyTokenId)
+      tokenIdSet.add(order.sellTokenId)
+    })
+    const tokenIds = Array.from(tokenIdSet.values())
+    console.log(tokenIds)
+    const tokenInfoPromises = fetchTokenInfoFromExchange(exchange, tokenIds, true)
+
+    await throwIfTokenIdAndSymbolDontMatch(strategy, tokenInfoPromises)
+
+    const order = determineOrderToExecute(strategy, argv.startTimestamp)
+    const buyTokenData = await tokenInfoPromises[order.buyTokenId]
+    const sellTokenData = await tokenInfoPromises[order.sellTokenId]
+    console.log("Executing order", JSON.stringify(order))
+
+    const exchangeRate = (await getOneinchPrice(buyTokenData, sellTokenData)).price
+    console.log(`Oracle price: ${exchangeRate} ${order.sellTokenSymbol} per ${order.buyTokenSymbol}`)
+
+    const adjustedExchangeRate = exchangeRate * ((100 - argv.priceAllowancePercent) / 100)
+    console.log(`Posted price: ${adjustedExchangeRate} ${order.sellTokenSymbol} per ${order.buyTokenSymbol}`)
+    console.log(`       i.e., ${1 / adjustedExchangeRate} ${order.buyTokenSymbol} per ${order.sellTokenSymbol}`)
+
+    const sellTokenBalance = await exchange.getBalance(account, sellTokenData.address)
+    console.log("Sell token balance:", toErc20Units(sellTokenBalance.toString(), sellTokenData.decimals))
+
+    const orders = []
+    const { base: buyAmount, quote: sellAmount } = getUnlimitedOrderAmounts(
+      adjustedExchangeRate,
+      sellTokenData.decimals,
+      buyTokenData.decimals
+    )
+    orders.push({
+      buyToken: argv.buyTokenId,
+      sellToken: argv.sellTokenId,
+      buyAmount: buyAmount,
+      sellAmount: sellAmount,
+    })
+
+    const gasPrice = await gasPriceWei(argv.gasPrice, argv.gasPriceScale)
+    console.log("Gas price in wei:", gasPrice)
+
+    // continue from here
+
+    if (orders.length > 0) {
+      // Fetch auction index and declare validity interval for orders.
+      // Note that order validity interval is inclusive on both sides.
+      const batchId = (await batchExchange.getCurrentBatchId.call()).toNumber()
+      const validFroms = Array(orders.length).fill(batchId)
+      const validTos = Array(orders.length).fill(batchId)
+
+      const gasPrices = await fetchGasPrices(argv.network)
+      const scaledGasPrice = parseInt(gasPrices[argv.gasPrice] * argv.gasPriceScale)
+      console.log(`Using current "${argv.gasPrice}" gas price scaled by ${argv.gasPriceScale}: ${scaledGasPrice}`)
+      await batchExchange.placeValidFromOrders(
+        orders.map((order) => order.buyToken),
+        orders.map((order) => order.sellToken),
+        validFroms,
+        validTos,
+        orders.map((order) => order.buyAmount),
+        orders.map((order) => order.sellAmount),
+        {
+          from: account,
+          gasPrice: scaledGasPrice,
+        }
+      )
+    }
+  }
+
+  return {
+    runAuction,
+  }
+}
diff --git a/scripts/auctions/run.js b/scripts/auctions/run.js
new file mode 100644
index 00000000..9d6ac91f
--- /dev/null
+++ b/scripts/auctions/run.js
@@ -0,0 +1,39 @@
+const { default_yargs } = require("../utils/default_yargs")
+const { runAuction } = require("./auctions")(web3, artifacts)
+
+const argv = default_yargs
+  .option("gasPrice", {
+    type: "string",
+    describe: "Gas price to be used for order submission",
+    choices: ["lowest", "safeLow", "standard", "fast", "fastest"],
+    default: "standard",
+  })
+  .option("gasPriceScale", {
+    type: "number",
+    describe: "Scale used as a multiplier to the gas price",
+    default: 1.0,
+  })
+  .option("strategyFile", {
+    type: "string",
+    describe: "file containing the orders to be placed in the auction",
+    default: 500,
+  })
+  .option("startTimestamp", {
+    type: "number",
+    describe: "Unix timestamp in milliseconds at which the auction is supposed to start",
+    demandOption: true,
+  })
+  .option("priceAllowancePercent", {
+    type: "number",
+    describe: "How much to change the current price in favour of the users when creating an order (e.g., 10)",
+    demandOption: true,
+  }).argv
+
+module.exports = async (callback) => {
+  try {
+    await runAuction(argv)
+    callback()
+  } catch (error) {
+    callback(error)
+  }
+}
diff --git a/scripts/auctions/sample_strategies/dai-weth_and_gno-owl.json b/scripts/auctions/sample_strategies/dai-weth_and_gno-owl.json
new file mode 100644
index 00000000..aeba5a81
--- /dev/null
+++ b/scripts/auctions/sample_strategies/dai-weth_and_gno-owl.json
@@ -0,0 +1,26 @@
+[
+  {
+    "buyTokenId": 1,
+    "buyTokenSymbol": "WETH",
+    "sellTokenId": 7,
+    "sellTokenSymbol": "DAI"
+  },
+  {
+    "buyTokenId": 18,
+    "buyTokenSymbol": "GNO",
+    "sellTokenId": 0,
+    "sellTokenSymbol": "OWL"
+  },
+  {
+    "buyTokenId": 7,
+    "buyTokenSymbol": "DAI",
+    "sellTokenId": 1,
+    "sellTokenSymbol": "WETH"
+  },
+  {
+    "buyTokenId": 0,
+    "buyTokenSymbol": "OWL",
+    "sellTokenId": 18,
+    "sellTokenSymbol": "GNO"
+  }
+]
diff --git a/test/scripts/auctions/auctions.js b/test/scripts/auctions/auctions.js
new file mode 100644
index 00000000..fcce8a9e
--- /dev/null
+++ b/test/scripts/auctions/auctions.js
@@ -0,0 +1,65 @@
+const BN = require("bn.js")
+const fs = require("fs").promises
+const tmp = require("tmp-promise")
+const assertNodejs = require("assert")
+
+const BatchExchange = artifacts.require("BatchExchange")
+const ERC20 = artifacts.require("ERC20Detailed")
+const MintableToken = artifacts.require("DetailedMintableToken")
+const GnosisSafe = artifacts.require("GnosisSafe")
+const ProxyFactory = artifacts.require("GnosisSafeProxyFactory")
+
+const { runAuction } = require("../../../scripts/auctions/auctions")(web3, artifacts)
+const { addCustomMintableTokenToExchange } = require("../../../scripts/utils/strategy_simulator")(web3, artifacts)
+const { toErc20Units, fromErc20Units } = require("../../../scripts/utils/printing_tools")
+
+const bnMaxUint256 = new BN(2).pow(new BN(256)).subn(1)
+
+contract("Auctions", function (accounts) {
+  let gnosisSafeMasterCopy
+  let proxyFactory
+  let exchange
+  const safeOwner = accounts[0]
+
+  beforeEach(async function () {
+    gnosisSafeMasterCopy = await GnosisSafe.new()
+
+    exchange = await BatchExchange.deployed()
+  })
+
+  describe("using withdrawal file", () => {
+    it("requests withdrawals", async () => {
+      const { id: id1, token: token1 } = await addCustomMintableTokenToExchange(exchange, "WETH", 18, accounts[0])
+      await token1.mint(accounts[0], toErc20Units("1", 18))
+      const { id: id2, token: token2 } = await addCustomMintableTokenToExchange(exchange, "USDC", 6, accounts[0])
+      await token2.mint(accounts[0], toErc20Units("400", 6))
+
+      const strategy = [
+        {
+          buyTokenId: id1,
+          buyTokenSymbol: "WETH",
+          sellTokenId: id2,
+          sellTokenSymbol: "USDC",
+        },
+        {
+          buyTokenId: id2,
+          buyTokenSymbol: "USDC",
+          sellTokenId: id1,
+          sellTokenSymbol: "WETH",
+        },
+      ]
+      const strategyFile = await tmp.file()
+      await fs.writeFile(strategyFile.path, JSON.stringify(strategy))
+
+      const argv = {
+        strategyFile: strategyFile.path,
+        priceAllowancePercent: 10,
+        startTimestamp: Date.now(),
+      }
+
+      await runAuction(argv)
+
+      await strategyFile.cleanup()
+    })
+  })
+})
